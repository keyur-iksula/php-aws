#summary Programmer's reference for class.s3.php (Simple Storage Service).
#labels Phase-Implementation
=class.s3.php=

class.s3.php allows you to interact with Amazon's Simple Storage Service (S3). You can add/remove buckets and keys and query information about them as well. [http://curl.haxx.se/ Curl] is used to enable working with large files.

==Usage==

The following code creates a new S3 object and displays a list of available buckets.

{{{
$s3 = new S3("Your Amazon Key", "Your Secret Amazon Key");
$buckets = $s3->getBuckets();
foreach($buckets as $bucket)
  echo $bucket . "<br/>";
}}}

==Members==

====$_key====
Contains your Amazon key.

====$_secret====
Contains your Amazon secret key.

====$_server====
Fully-qualified URL to Amazon's S3 server. Defaults to http://s3.amazonaws.com. Most likely, this won't ever need to be changed.

====$_pathToCurl====
In order to handle large files efficiently (without loading them into memory), we use [http://curl.haxx.se/ curl] directly at the system shell level. *`$_pathToCurl`* needs to point to curl's location on your system. In most cases, you can simply set this to "curl" as the command in typically available in your path. If that doesn't work, you can locate curl on your system by running `which curl` or `locate curl` at a command prompt.

Future versions will attempt to auto-detect curl's location if the one you specify is not valid (or executable).

====$_hasher====
Instance of Crypt_HMAC() used to generate the sha1 request signature Amazon requires.

====$_date====
Date of the current request.

====$_error====
String containing an error message from Amazon if an error occurred.

==Methods==

====__construct($key, $secret)====
The S3 constructor initializes `$this->_hasher` using Amazon key and secret key you supply.

====base64($str)====
Returns the base-64 encoded version of string `$str`.

====bucketExists($bucket)====
Returns true if `$bucket` is one of your available buckets. If false is returned, the bucket may potentially exist for another user.

====createBucket($bucket)====
Attempts to create `$bucket` as a new bucket in your account. Returns true on success. If not successful, false is returned and $this->_error is set with the error message received from Amazon.

====deleteBucket($bucket)====
Attempts to delete the bucket named `$bucket` from your account. Returns true on success. If not successful, false is returned and $this->_error is set with the error message received from Amazon.

Note: non-empty buckets cannot be deleted. This is a restriction (a good one) of Amazon.

====deleteObject($bucket, $object)====
Attempts to delete the object named `$object` in bucket `$bucket`. Returns true on success. False if the object could not be deleted.

====directorySize($bucket, $prefix)====
Returns the size, in bytes, of all the keys in bucket `$bucket` with prefix `$prefix`.

====downloadObject($bucket, $object, $saveTo)====
Downloads the object named `$object` from bucket `$bucket` and saves on the filesystem as `$saveTo`.

====getBucketContents($bucket, $prefix, $delim, $marker)====
Returns an array containing the contents of bucket `$bucket`. Please see the [http://docs.amazonwebservices.com/AmazonS3/2006-03-01/ListingKeys.html Amazon reference] for an explanation of how `$prefix`, `$delim`, and `$marker` affect the results.

====getBuckets()====
Returns an array containing the buckets accessible to your account.

====getObject($bucket, $object)====
Returns the contents of the object `$object` in bucket `$bucket`.

Note: since this loads the contents into memory, consider using `downloadObject()` for large files.

====getObjectHead($bucket, $object)====
Returns the HTTP header info for object `$object` in bucket `$bucket`.

====getObjectInfo($bucket, $object)====
Returns Amazon's meta information about object `$object` in bucket `$bucket`.

====isOk($result)====
Searches the result of the current request for an error message. Returns `true` if none found. Otherwise, returns `false` and stores the error message in `$this->_error`.

====objectExists($bucket, $object)====
Returns true if object `$object` in bucket `$bucket` exists. False if it does not exist.

====putObject($bucket, $object, $filename, $public, $disposition)====
Stores the file `$filename` into bucket `$bucket` as object `$object`. If `$public` is true, the new object will be publicly accessible via the web at http://s3.amazonaws.com/$bucket/$object. If `$disposition` is set, the object will be stored with a special header to make the file download as an attachment named `$disposition`. This is useful if you want the file to have a different filename than its object name.

====sendRequest($req, $params)====
Sends the request specified by the array `$req` along with any additional params listed in the array `$params`.

Note: items in `$req` are sent as arguments to `curl`, while items in `$params` are sent in the query string.

====signature($req)====
Calculates a request signature using [http://docs.amazonwebservices.com/AmazonS3/2006-03-01/RESTAuthentication.html the algorithm specified by Amazon] and the items in `$req`.

====sortKeys($keys, $first)====
Sorts the keys listed in `$keys`. If `$first` is `null` it sorts the keys alphabetically. If `$first` is "key", keys are sorted alphabetically followed by prefixes. If `$first` is "prefix", prefixes are sorted first then the keys. This is useful if you want to list your getBucketContents() results in a filesytem format. You can have files and directories intermixed (OS X style) or directories listed first (Windows style).